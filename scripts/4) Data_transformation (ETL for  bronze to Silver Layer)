/*
----------------- this stage is after DDL scripting ----------------
In this stage we already created other tables where we are copying the content 
from bronze tables into silver table but in very cleaned format transforming 
bad quality data into readable format

a) first check if the id is unique and nut null and remove the duplicates
b) check the blank spaces
c) check other columns value using distinct if there used any abbreviation change it using case
d) check if the date column is real date if it is character or anything else then change its datatype
e) after everything checked and inserted make sure to makeit stored procedure just like we did in ETL
*/



create or alter procedure silver.load_silver as
begin

	declare @start_time datetime, @end_time datetime, @batch_start_time datetime, @batch_end_time datetime ;
    
	begin try
        set @batch_start_time = getdate();
        print '--------------------------------------------------------';
        print 'Loadig CRM Tables';
        print '--------------------------------------------------------';

        set @start_time = getdate();

-- INSERTED TRANSFORMED DATA FROM BRONZE.CRM_CUST_INFO TO SILVER.CRM_CUST_INFO --

		print '>>Truncating Table silver.crm_cust_info';
		truncate table silver.crm_cust_info;

		print '>>Inserting Data into silver.crm_cust_info';
		insert into silver.crm_cust_info (
			cst_id,
			cst_key,
			cst_firstname,
			cst_lastname,
			cst_marital_status,
			cst_gndr,
			cst_create_date
		)

		select
		cst_id,
		cst_key,
		trim(cst_firstname)as cst_firstname ,
		trim(cst_lastname)as cst_lastname,
		case when upper(trim(cst_marital_status))='S' then 'single'
			 when upper(trim(cst_marital_status))='M' then 'married'
			 else 'n/a'
		end as cst_marital_status,
		case when upper(trim(cst_gndr))='F' then 'Female'
			 when upper(trim(cst_gndr))='M' then 'Male'
			 else 'n/a'
		end as cst_gndr,
		cst_create_date
		from
				(
				select 
				*,
				row_number() over(partition by cst_id order by cst_create_date desc) as rnk
				from bronze.crm_cust_info
				)t
		where rnk=1 and cst_id is not null ;

		set @end_time = getdate();
        print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
        print '==============================================================';


-- INSERTED TRANSFORMED DATA FROM BRONZE.CRM_PRD_INFO TO SILVER.CRM_PRD_INFO --

		set @start_time = getdate();
        print '>>Truncating Table silver.crm_cust_info';
		truncate table silver.crm_prd_info;
		
		print '>>Inserting Data into silver.crm_prd_info';
		insert into silver.crm_prd_info 
		(
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)
		select prd_id,
			   replace (substring(prd_key,1,5),'-','_') as cat_id,
			   substring(prd_key,7,len(prd_key)) as prd_key,
			   prd_nm,
			   coalesce(prd_cost,0) as prd_cost,
			   case upper(trim(prd_line))
					when 'M' then 'mountain'
					when 'R' then 'road'
					when 'S' then 'other sales'
					when 'T' then 'touring'
					else 'n/a'
			   end as prd_line,
			   cast(prd_start_dt as date)as prd_start_dt ,
			   lead(prd_start_dt)over (partition by prd_key order by prd_start_dt)as prd_end_dt
		from bronze.crm_prd_info;

		set @end_time = getdate();
        print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
        print '==============================================================';


-- INSERTED TRANSFORMED DATA FROM BRONZE.CRM_SALES_DETAILS TO SILVER.CRM_SALES_DETAILS --

		set @start_time = getdate();
        print '>>Truncating Table silver.crm_sales_details';
		truncate table silver.crm_sales_details;

        print '>>Inserting Data into silver.crm_sales_details';
		insert into silver.crm_sales_details
		(
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales,
			sls_quantity,
			sls_price
		)
		select
				sls_ord_num,
				sls_prd_key,
				sls_cust_id,
				case 
					when sls_order_dt <=0  or len(sls_order_dt)!=8 then null
					else cast(cast(sls_order_dt as varchar(50)) as date)
				end as sls_order_dt,

				case 
					when sls_ship_dt <=0  or len(sls_ship_dt)!=8 then null
					else cast(cast(sls_ship_dt as varchar (50))as date)
				end as sls_ship_dt,

				case
					when sls_due_dt <=0 or len(sls_due_dt)!=8 then null
					else cast(cast(sls_due_dt as varchar(50)) as date) 
				end as sls_due_dt,

				case
					when sls_sales is null or sls_sales<=0 or sls_sales!=  sls_quantity * abs(sls_price) 
					then sls_quantity*abs(sls_price)
					else sls_sales
				end as sls_sales,

				sls_quantity,

				case 
					 when sls_price is null or sls_price<=0  
					 then sls_sales/nullif(sls_quantity,0)
					 else sls_price
				end as sls_price

		from bronze.crm_sales_details

		set @end_time = getdate();
        print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
        print '==============================================================';


        print '--------------------------------------------------------';
        print 'Loadig ERP Tables';
        print '--------------------------------------------------------';


-- INSERTED TRANSFORMED DATA FROM BRONZE TO SILVER.ERP_CUST_AZ12 --
		set @start_time = getdate();
        print '>>Truncating Table silver.erp_cust_az12';
		truncate table silver.erp_cust_az12;
        
		print '>>Inserting Data into silver.erp_cust_az12';

		insert into silver.erp_cust_az12
		(
			cid,
			bdate,
			gen
		)
			select 
	 			case 
					when cid like 'NAS%' then trim(substring(cid,4,len(cid)))
					else cid
				end as cid,
				case 
					when bdate > getdate() then null
					else bdate
				end as bdate,
				case 
					when upper(trim(gen)) in ('M','MALE','male') then 'Male'
					when upper(trim(gen)) in ('F', 'FEMALE','female') then 'Female'
					else 'n/a'
				end as gen
		from bronze.erp_cust_az12 ;
		set @end_time = getdate();
        print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
        print '==============================================================';


-- INSERTED TRANSFORMED DATA FROM BRONZE TO SILVER.ERP_LOC_A101 --

		set @start_time = getdate();
        print '>>Truncating Table silver.erp_loc_A101';
		truncate table silver.erp_loc_A101;

        print '>>Inserting Data into silver.erp_loc_A101';

		insert into silver.erp_loc_A101
		(
		  cid,
		  cntry
		)
		  select 
				replace (cid,'-','') as cid,
				case 
					when trim(cntry)='DE' then 'Germany'
					when trim(cntry) in ('US','USA') then 'United States'
					when trim (cntry) ='' or trim (cntry) is null then 'n/a'
					else trim(cntry) 
				end as cntry
		  from bronze.erp_loc_A101;
		  set @end_time = getdate();
          print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
          print '==============================================================';


-- INSERTED TRANSFORMED DATA FROM BRONZE TO SILVER.ERP_PX_CAT_G1V2 (NOTHING TO CHANGE) --
		set @start_time = getdate();
        print '>>Truncating Table silver.erp_px_cat_g1v2';
		truncate table silver.erp_px_cat_g1v2;

        print '>>Inserting Data into silver.erp_px_cat_g1v2';

		insert into silver.erp_px_cat_g1v2
		(
		 id,
		 cat,
		 subcat,
		 maintenance
		)
			select 
				 id,
				 cat,
				 subcat,
				 maintenance
				from bronze.erp_px_cat_g1v2;

		
		
		set @end_time = getdate();
        print 'Load Duration : '+ cast(datediff(second, @start_time, @end_time)as varchar) + 'seconds';
        print '==============================================================';

        set @batch_end_time = getdate();
        print '?????????????????????????????????????????'
        print 'Loading Bronze Layer is Completed'
        print '  - Load Duration : '+ cast(datediff(second, @batch_start_time, @batch_end_time)as varchar) + 'seconds';
        print '?????????????????????????????????????????'


    end try
    begin catch
        print '======================================='
        print 'Error Occured during loading Bronze Layer'
        print 'Error Message' + error_message();
        print 'Error Message' + cast(error_number() as varchar);
        print '======================================='
    end catch
end
